#!/usr/bin/env node
/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('backbone:server');
const http = require('http');
const server = http.createServer(app);
const normalizePort = (val) => {
  const port = parseInt(val, 10);

  return isNaN(port) ? val : port >= 0 ? port : false;
}
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;

  debug('Listening on ' + bind);
}
/**
 * Event listener for HTTP server "error" event.
 */
const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = (typeof port === 'string' ? 'Pipe ' : 'Port ') + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

app.set('port', port);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
